/**
	此程序示范了Lambda表达式的几种简化写法
 */
interface Eatable
{
	void taste();
}
interface Flyable
{
	void fly(String weather);
}
interface Addable
{
	int add(int a,int b);
}
public class LambdaDemo1 
{
	// 调用该方法需要Eatable对象
	public void eat(Eatable e)//表面上看调用该方法需要一个Eatable类型的参数，但下面的程序实际传入的却是一个Lambda表达式
	{
		System.out.println(e);
		e.taste();
	}
	// 调用该方法需要Flyable对象
	public void drive(Flyable f)//表面上看调用该方法需要一个Flyable类型的参数，但下面的程序实际传入的却是一个Lambda表达式
	{
		System.out.println("我正在驾驶：" + f);
		f.fly("碧空如洗的晴日");
	}
	// 调用该方法需要Addable对象
	public void test(Addable add)//表面上看调用该方法需要一个Addable类型的参数，但下面的程序实际传入的却是一个Lambda表达式，其实际上会被当成一个“任意类型的对象
	{
		System.out.println("5与3的和为：" + add.add(5,3));
	}
	public static void main(String[] args) 
	{
		LambdaDemo1 ld1 = new LambdaDemo1();
		// Lambda表达式的代码块只有一条语句，可以省略花括号
		ld1.eat(()->System.out.println("苹果的味道不错！"));
		// Lambda表达式的形参列表只有一个形参，可以省略圆括号
		ld1.drive(weather->{
			System.out.println("今天的天气是：" + weather);
			System.out.println("直升机飞行平稳");
		});
		// Lambda表达式中的代码块只有一条语句，可以省略花括号
		// 代码块中只有一条语句，即使该表达式需要返回值，也可以省略return 关键字
		ld1.test((int a, int b)->a + b);
	}
}
