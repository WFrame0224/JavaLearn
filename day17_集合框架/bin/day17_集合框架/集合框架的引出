什么是集合框架：

	java2中定义的容器类无法集中和统一管理。集合框架是为了表示和操作集合而规定的一种统一的标准的体系结构。任何集合框架都包含三大块内容：
	对外的接口、接口的实现、集合运算的算法（底层都对应着某种数据结构的算法）
	
为什么需要集合框架：（把集合框架的类和接口都存放在java.util包中）

	1）：提供功能的复用（java.util包）
	2）：让程序员专注于业务开发，而不是数据结构和算法
----------------------------------------------------------------------------------------------------------------------------
常用的接口规范：
	常用的集合类：
	Set（集）：集合中的对象不按特定的方式排序，不允许元素重复
	List（列表）：集合中的对象按照索引的位置排序，允许元素重复
	Map（映射）:集合中每一个元素包含一对key和value对象，不允许key对象重复，value对象可以重复	
************************************************************************************************************
面向接口编程：
	接口类型	变量 = new 实现类();
	eg:List list = new ArrayList();

	**List：实现类特点和性能分析：
	------------------------
	三者（Vector类，ArrayList类，LinkedList类）共同的特点（共同遵循的规范）：
		1）：允许元素重复
		2）：记录元素的先后添加顺序
	三者不同的特点：
		**Vector类：		底层采用数组结构的算法，方法都采用了synchronized修饰，线程安全，但是相对于ArrayList，性能较低
		**ArrayList类：	底层采用数组结构的算法，方法没有采用synchronized修饰，线程不安全，但是相对于Vector，性能较高
			现在，ArrayList几乎已经取代了Vector的江湖地位，为了保证其线程安全，采用List list = Collections.synchronizedList(new ArrayList(...)); 
		**LinkedList类：	底层采用了双向列表结构算法，方法没有采用synchronized修饰，线程不安全
		
		-----数组结构算法和双向列表结构算法的性能问题-----
		--                                           ---
			数组结构算法：插入和删除操作速度低，查询和更改较快
			链表结构算法：插入和删除操作速度快，查询和更改较慢	
			----->如果删除和和插入操作频繁，应该选用LinkedList类
				      如果查询操作频繁，应该使用ArrayList类