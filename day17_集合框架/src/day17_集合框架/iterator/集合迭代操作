集合的迭代操作：
	把集合做的元素一个一个的遍历取出来
--------------------------------------
迭代器对象：
	Iterator：迭代器对象，只能从上往下迭代
		boolean hasNext();判断当前指针是否有下一个元素
		Object next();获取指针的下一个元素，并且移动指针
	ListIterator：是Iterator接口的子接口，支持双向迭代，既可以从上往下，或者从下往上迭代
	Enumeration：古老的迭代器对象，现在已经被Iterator取代了，适用于古老的Vector
*――*――*――*――*――*――*――*――*――*――*――*――*――*――*――*――*――*――*――*――*――*――*――*――*――*――*――*――*
深入分析for-each和迭代器：
	for-each：
		语法格式 for(类型 变量 : 数组名/Iterable实现类对象){
			//TODO
		}
	1）：foreach可以操作数组：底层依然采用for循环+索引来获取数组元素
	2）：foreach可以操作Iterator的实例：  底层其实采用的是Iterator（迭代器）
	---------------------------------------------------------
	***直接使用foreach迭代数组和集合元素即可，简单，，，但是当需要边迭代集合元素，边删除指定元素的时候只能使用Iterator
																				***						********
	在迭代集合的时候，边迭代，边删除是非常常用的操作：
		如何避免 并发修改异常呢？
			-->不要使用集合对象的删除方法（在Collection接口中存在删除指定元素的方法boolean remove(Object ele);
											但是该方法只能从集合中删除元素，不能把迭代器中指定的元素也删除）
											
		王道在于：使用Iterator中的remove方法,该方法会从两个线程中同时移除被删除的元素，保证了两个线程的同步